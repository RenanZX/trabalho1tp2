/////////////////////////////////////////
///   Descrição do arquivo:
///   @author   Matheus Rodrigues Guimarães
///   @since    ??/04/2017
///   @version  1.0
/////////////////////////////////////////
#ifndef TOPICOS_H
#define TOPICOS_H

#include <iostream>
#include <string>
#include <cstring>
#include <stdexcept>

using namespace std;

class Topico {
private:
	//////////////////////////////////////////////////////////////////////////////////
	///   Nome do tópico
	//////////////////////////////////////////////////////////////////////////////////
	string nome;

public:
	//////////////////////////////////////////////////////////////////////////////////
	///   @brief Construtor
	//////////////////////////////////////////////////////////////////////////////////
	Topico();

	//////////////////////////////////////////////////////////////////////////////////
	///   @brief Construtor que já inicia com nome
	//////////////////////////////////////////////////////////////////////////////////
	Topico(string);

	//////////////////////////////////////////////////////////////////////////////////
	///   @brief Propriedade de colocar um nome ao tópico
	//////////////////////////////////////////////////////////////////////////////////
	void setNomeTopico(string) throw(runtime_error);

	//////////////////////////////////////////////////////////////////////////////////
	///   @brief Propriedade de retornar o nome do tópico
	//////////////////////////////////////////////////////////////////////////////////
	string getNomeTopico() throw(runtime_error);

};

class GerenciadorTopico {

private:

	//////////////////////////////////////////////////////////////////////////////////
	///   @brief Constantes que equivalem às opções de funções pro usuário
	//////////////////////////////////////////////////////////////////////////////////
	const static int CRIAR;
	const static int PESQUISAR;
	const static int EDITAR;
	const static int EXCLUIR;
	const static int ASSOCIAR;
	const static int RETORNAR;

	//////////////////////////////////////////////////////////////////////////////////
	///		String para armazenar o nome do arquivo de disciplinas
	//////////////////////////////////////////////////////////////////////////////////
	string arquivo_disciplina;



public:

	//////////////////////////////////////////////////////////////////////////////////
	///		@brief Cria um novo tópico para a disciplina
	//////////////////////////////////////////////////////////////////////////////////
	void criarTopico() throw(runtime_error);

	//////////////////////////////////////////////////////////////////////////////////
	///		@brief Pesquisa um tópico na disciplina
	//////////////////////////////////////////////////////////////////////////////////
	void pesquisarTopico() throw(runtime_error);

	//////////////////////////////////////////////////////////////////////////////////
	///		@brief Edita um tópico existente na disciplina
	//////////////////////////////////////////////////////////////////////////////////
	void editarTopico() throw(runtime_error);

	//////////////////////////////////////////////////////////////////////////////////
	///		@brief Associa um tópico a uma disciplina
	//////////////////////////////////////////////////////////////////////////////////
	void associarTopico() throw(runtime_error);

	//////////////////////////////////////////////////////////////////////////////////
	///		@brief Exclui um tópico de uma disciplina
	//////////////////////////////////////////////////////////////////////////////////
	void excluirTopico() throw(runtime_error);



};

#endif /* TOPICOS_H */
