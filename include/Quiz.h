/////////////////////////////////////////
///     Descrição do arquivo:
///     @author     Renan Godoi de Medeiros
///     @since      ??/04/2017
///     @version    1.0
/////////////////////////////////////////

#ifndef QUIZ_H
#define QUIZ_H
#include "GerenciadorQuiz.h"
#include <iostream>
#include <string>
#include <ctype.h>

using namespace std;
//////////////////////////////////////////////////////////////////////////////////
///     @brief Classe de perguntas
//////////////////////////////////////////////////////////////////////////////////
class Pergunta
{
private:

    //////////////////////////////////////////////////////////////////////////////////
    ///     index = índice da pergunta
    ///     strpergunta = pergunta
    ///     strresposta = resposta
    //////////////////////////////////////////////////////////////////////////////////
    string index;
    string strpergunta;
    string strresposta;
public:

    //////////////////////////////////////////////////////////////////////////////////
    ///     @brief Seta a pergunta
    ///     @param ind Índice
    ///     @param per Pergunta
    ///     @param res Resposta
    //////////////////////////////////////////////////////////////////////////////////
    void SetPergunta(string ind,string per,string res) throw(invalid_argument);

    //////////////////////////////////////////////////////////////////////////////////
    ///     @brief Retorna o índice da pergunta
    //////////////////////////////////////////////////////////////////////////////////
    string getIndex();

    //////////////////////////////////////////////////////////////////////////////////
    ///     @brief Retorna a pergunta
    //////////////////////////////////////////////////////////////////////////////////
    string getPergunta();

    //////////////////////////////////////////////////////////////////////////////////
    ///     @brief Retorna a resposta da pergunta
    //////////////////////////////////////////////////////////////////////////////////
    string getResposta();

    //////////////////////////////////////////////////////////////////////////////////
    ///     @brief Compara duas perguntas
    ///     @param p Pergunta
    //////////////////////////////////////////////////////////////////////////////////
    bool Comparar(Pergunta p);

    //////////////////////////////////////////////////////////////////////////////////
    ///     @brief Compara duas respostas
    ///     @param resposta Resposta
    //////////////////////////////////////////////////////////////////////////////////
    bool CompararResposta(string resposta);
};

//////////////////////////////////////////////////////////////////////////////////
///     Definição da classe para ser usada na classe ELEMENTO
//////////////////////////////////////////////////////////////////////////////////
class listaPergunta;

//////////////////////////////////////////////////////////////////////////////////
///     @brief Classe elemento
///     É uma lista duplamente encadeada de perguntas
//////////////////////////////////////////////////////////////////////////////////
class ELEMENTO
{
friend class listaPergunta;
protected:
    ~ELEMENTO();
    Pergunta* p;
    ELEMENTO* prox;
    ELEMENTO* ant;
};

//////////////////////////////////////////////////////////////////////////////////
///     @brief Classe lista de perguntas
//////////////////////////////////////////////////////////////////////////////////
class listaPergunta
{
//////////////////////////////////////////////////////////////////////////////////
///     @brief Classe amiga da classe quiz
//////////////////////////////////////////////////////////////////////////////////
friend class Quiz;
private:
    ELEMENTO *primeiro;
    ELEMENTO *ultimo;
protected:

    //////////////////////////////////////////////////////////////////////////////////
    ///     @brief Destruidor
    //////////////////////////////////////////////////////////////////////////////////
    ~listaPergunta();

    //////////////////////////////////////////////////////////////////////////////////
    ///     @brief Insere no início da lista
    ///     @param p Ponteiro para objeto pergunta
    //////////////////////////////////////////////////////////////////////////////////
    void SetInicio(Pergunta* p);

    //////////////////////////////////////////////////////////////////////////////////
    ///     @brief Insere no final da lista
    //////////////////////////////////////////////////////////////////////////////////
    void SetFinal(Pergunta* p);

    //////////////////////////////////////////////////////////////////////////////////
    ///     @brief Retorna um elemento no início da lista
    //////////////////////////////////////////////////////////////////////////////////
    Pergunta* getInicio();

    //////////////////////////////////////////////////////////////////////////////////
    ///     @brief Retorna um elemento no final da lista
    //////////////////////////////////////////////////////////////////////////////////
    Pergunta* getFinal();

    //////////////////////////////////////////////////////////////////////////////////
    ///     @brief Verifica se a lista está vazia
    //////////////////////////////////////////////////////////////////////////////////
    bool EstaVazia();

    //////////////////////////////////////////////////////////////////////////////////
    ///     @brief Deleta o elemento
    //////////////////////////////////////////////////////////////////////////////////
    bool deletarElemento(string ind);

    //////////////////////////////////////////////////////////////////////////////////
    ///     @brief Mostra os elementos da lista
    //////////////////////////////////////////////////////////////////////////////////
    int ShowLista();
};

class Quiz
{
private:

    //////////////////////////////////////////////////////////////////////////////////
    ///     Ponteiro para a lista de perguntas
    //////////////////////////////////////////////////////////////////////////////////
    listaPergunta *l;

    //////////////////////////////////////////////////////////////////////////////////
    ///     Constantes das instruções pro usuário
    //////////////////////////////////////////////////////////////////////////////////
    const static int RESPONDER;
    const static int PULAR;
    const static int SAIR;

    //////////////////////////////////////////////////////////////////////////////////
    ///     @brief Organiza a lista a partir de uma string de índices
    ///     @param inds Índices
    //////////////////////////////////////////////////////////////////////////////////
    void OrganizarLista(string inds);
public:
    //////////////////////////////////////////////////////////////////////////////////
    ///     @brief Construtor
    //////////////////////////////////////////////////////////////////////////////////
    Quiz();

    //////////////////////////////////////////////////////////////////////////////////
    ///     @brief Destrutor
    //////////////////////////////////////////////////////////////////////////////////
    virtual ~Quiz();

    //////////////////////////////////////////////////////////////////////////////////
    ///     @brief Começa um quiz
    //////////////////////////////////////////////////////////////////////////////////
    void ComecarQuiz()throw(invalid_argument);

    //////////////////////////////////////////////////////////////////////////////////
    ///     @brief Carrega um quiz existente
    //////////////////////////////////////////////////////////////////////////////////
    void CarregarQuiz()throw(invalid_argument);

    //////////////////////////////////////////////////////////////////////////////////
    ///     @brief Seleciona as perguntas pro usuário
    //////////////////////////////////////////////////////////////////////////////////
    void SelecionarPergunta()throw(invalid_argument);

    //////////////////////////////////////////////////////////////////////////////////
    ///     @brief Seta as perguntas pro usuário
    ///     @param in Índice
    ///     @param p Pergunta
    ///     @param r Resposta
    //////////////////////////////////////////////////////////////////////////////////
    void SetPergunta(string in,string p,string r)throw(invalid_argument);

    //////////////////////////////////////////////////////////////////////////////////
    ///     @brief Lê o quiz
    //////////////////////////////////////////////////////////////////////////////////
    void lerQuiz()throw(invalid_argument);
};

#endif // QUIZ_H
